name: .Net
on:
  push:
    tags:
    - RELEASE
    branches:
    - main
  pull_request:
    types:
    - opened
    - synchronize
    - reopened
    - closed
    branches:
    - main
env:
  IS_RELEASE_CANDIDATE: >-
    ${{
      (
        github.event_name == 'pull_request' &&
        startsWith(github.event.pull_request.title, 'RELEASES:') &&
        contains(github.event.pull_request.labels.*.name, 'RELEASES')
      )
      ||
      (
        github.event_name == 'push' &&
        startsWith(github.event.head_commit.message, 'RELEASES:') &&
        github.ref_name == 'RELEASE'
      )
    }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Setup .Net
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  add_tag:
    runs-on: ubuntu-latest
    needs:
    - build
    if: >
      needs.build.result == 'success' &&
      github.event.pull_request.merged &&
      github.event.pull_request.base.ref == 'main' &&
      startsWith(github.event.pull_request.title, 'RELEASES:') &&
      contains(github.event.pull_request.labels.*.name, 'RELEASES')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Extract Version Number and Release Notes
      id: extract_version
      run: |-
        echo "version_number=$(grep -oP '(?<=<Version>)[^<]+' BuildTestApp/BuildTestApp.csproj)" >> $GITHUB_ENV
        package_release_notes=$(awk -v RS='' -F'</?PackageReleaseNotes>' 'NF>1{print $2}' BuildTestApp/BuildTestApp.csproj | sed -e 's/^[[:space:]]*//')
        echo "package_release_notes=$package_release_notes" >> $GITHUB_ENV
    - name: Print Version Number and Release Notes
      run: |
        echo "Version number is ${{ env.version_number }}"
        echo "Release Notes: ${{ env.package_release_notes }}"
    - name: Configure Git
      run: |-
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
    - name: Authenticate with GitHub
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_FOR_TAGGING }}
    - name: Add Release Tag
      run: |-
        git tag -a "v${{ env.version_number }}" -m "Release - v${{ env.version_number }}"
        git push origin --tags
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_FOR_TAGGING }}
      with:
        tag_name: "v${{ env.version_number }}"
        release_name: "Release - v${{ env.version_number }}"
        body: |
          ### Release - v${{ env.version_number }}
          
          #### Release Notes
          ${{ env.package_release_notes }}
  publish:
    runs-on: ubuntu-latest
    needs: [add_tag]
    if: needs.add_tag.result == 'success'
    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Setup .Net
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restore NuGet Packages
      run: dotnet restore
    - name: Build Release
      run: dotnet build --no-restore --configuration Release
    - name: Pack Nuget
      run: dotnet pack --configuration Release --include-symbols
    - name: Release Task
      run:
        dotnet nuget push **/bin/Release/**/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate